import java.util.regex.Pattern

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.+'
    }
}

apply plugin: 'android'

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile project(':pictogram-lib')
    compile project(':OasisLib')
    compile project(':GIRAF_Components')    
}

android {
    compileSdkVersion 15
    buildToolsVersion "21.1.2"

    lintOptions {
        abortOnError false
    }

    signingConfigs {
        release {
            // Read keystore information from file on server
            Properties props = new Properties()
            if (rootProject.file('/srv/jenkins/google_play_keys/keystore.properties').exists()) 
            {
                props.load(new FileInputStream(rootProject.file('/srv/jenkins/google_play_keys/keystore.properties')))
                storeFile file(props['storeFile'])
                storePassword props['storePassword']
                keyAlias props['keyAlias']
                keyPassword props['keyPassword']

            }

            
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            zipAlignEnabled = true
        }
    }

    // Set custom apk name
    applicationVariants.all { variant ->
        def name
        variant.outputs.each { output ->
            def apkDirectory = output.outputFile.parentFile
            def manifestParser = new com.android.builder.core.DefaultManifestParser()

            if (output.zipAlign) {
                name = applicationId + "_" + manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile) + "." + manifestParser.getVersionCode(android.sourceSets.main.manifest.srcFile) + "_aligned.apk"
                output.outputFile = new File(apkDirectory, name)
            }

            name = applicationId + "_" + manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile) + "." + manifestParser.getVersionCode(android.sourceSets.main.manifest.srcFile) + "_unaligned.apk"
            output.packageApplication.outputFile = new File(apkDirectory, name)
        }    
    }

    // Autoincrement version code in android manifest
    task('increaseVersionCode') << {
        def manifestFile = file("src/main/AndroidManifest.xml")
        def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
        def manifestText = manifestFile.getText()
        def matcher = pattern.matcher(manifestText)
        matcher.find()
        def versionCode = Integer.parseInt(matcher.group(1))
        def manifestContent = matcher.replaceAll("versionCode=\"" + ++versionCode + "\"")
        manifestFile.write(manifestContent)
    }

    tasks.whenTaskAdded { task ->
        if (task.name == 'generateReleaseBuildConfig') {
            task.dependsOn 'increaseVersionCode'
        }
    }
}